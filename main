import numpy as np
import cv2

# 定义常量
MIN_TRANSMISSION = 0.1
MAX_PATCH_SIZE = 15
OMEGA = 0.95
P = 0.001
W = 0.95

def compute_dark_channel(img, patch_size):
    # 计算暗通道
    b, g, r = cv2.split(img)
    min_channel = cv2.min(cv2.min(r, g), b)
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (patch_size, patch_size))
    dark_channel = cv2.erode(min_channel, kernel)
    return dark_channel

def estimate_atmospheric_light(img, dark_channel):
    # 自适应大气光照估计
    sorted_pixels = np.sort(dark_channel.flatten())[::-1]
    num_pixels = len(sorted_pixels)
    num_pixels_to_sample = int(np.ceil(num_pixels * 0.1))
    pixels_to_sample = sorted_pixels[:num_pixels_to_sample]
    atmospheric_light = np.mean(pixels_to_sample)
    return atmospheric_light

def estimate_transmission(img, atmospheric_light, omega, p, w):
    # 估计透射率
    normalized_img = img.astype(np.float32) / 255.0
    numerator = normalized_img - atmospheric_light
    denominator = np.maximum(normalized_img, atmospheric_light)
    raw_transmission = 1 - omega * compute_dark_channel(numerator / denominator, MAX_PATCH_SIZE)
    refined_transmission = guided_filter(normalized_img, raw_transmission, MAX_PATCH_SIZE, epsilon=1e-5)
    transmission = np.clip(refined_transmission, MIN_TRANSMISSION, 1.0)
    return transmission

def perform_white_balance(img, transmission):
    # 色彩校正
    img_wb = np.empty_like(img)
    for i in range(3):
        img_wb[:, :, i] = img[:, :, i] * 255 / transmission
    return img_wb

def dehaze(img):
    # 多尺度处理和边缘保护
    pyramid = tuple(cv2.pyrDown(img) for _ in range(3))
    transmission_pyramid = tuple(estimate_transmission(p, estimate_atmospheric_light(p, compute_dark_channel(p, MAX_PATCH_SIZE)), OMEGA, P, W) for p in pyramid)
    for i in range(len(pyramid) - 1):
        h, w = pyramid[i].shape[:2]
        transmission_pyramid[i] = cv2.resize(transmission_pyramid[i], (w, h), interpolation=cv2.INTER_LINEAR)
    transmission = np.clip(cv2.pyrUp(transmission_pyramid[-1], dstsize=img.shape[:2][::-1]), MIN_TRANSMISSION, 1.0)
    for i in range(len(pyramid) - 2, -1, -1):
        h, w = pyramid[i].shape[:2]
        transmission = cv2.resize(transmission, (w, h), interpolation=cv2.INTER_LINEAR)
        transmission = np.clip(cv2
